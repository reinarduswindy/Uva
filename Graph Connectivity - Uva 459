#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string>

#define REP(X, Y) for(int (X) = 0; (X) < (Y); ++(X))
#define FOR(X, Y, Z) for(int (X) = (Y); (X) <= (Z); ++(X))
#define RFOR(X, Y, Z) for(int (X) = (Y); (X) >= (Z); --(X))
#define SZ(Z) ((int) (Z).size)
#define ALL(W) (W).begin(), (W).end()
#define RESET(C, V) memset(C, V, sizeof(C))
#define PB push_back
#define MP make_pair
#define A first
#define B second
#define MX(Z, Y) Z = max((Z), (Y))
#define MN(X, Y) X = min((X), (Y))
#define FORIT(X, Y) for(typeof((Y).begin()) X = (Y).begin(); X != (Y).end(); X++)
#define RFORIT(X, Y) for(typeof(Y).rbegin()) X = (Y).rbegin(); X != (Y).rend(); X++)
#define INF (1 << 30)
#define _Pi(i) printf("%d", i)
#define _Pd(nd) printf("n.%d", d)
#define _Pc(c) printf("%c", c)
#define _Ps(s) printf("%s", s)
#define _Si(i) scanf("%d", &i)
#define _Sd(d) scanf("%d", &d)
#define _Sc(c) scanf("%c", &c)
#define _Ss(s) scanf("%s", &s)

#define isOn(S, j) (S & (1 << j))
#define setBit(S, j) (S |= (1 << j))
#define clearBit(S, j) (S &= ~(1 << j))
#define toggleBit(S, j) (S ^= (1 << j))
#define lowBit(S) (S & (-S))
#define setAll(S, n) (S = (1 << n) - 1)
#define modulo(S, N) ((S) & (N - 1))
#define isPowerOfTwo(S) (!(S & (S - 1)))
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
#define turnOffLastBit(S) ((S) & (S - 1))
#define turnOnLastZero(S) ((S) | (S + 1))
#define turnOffLastConsecutiveBits(S) ((S) & (S + 1))
#define turnOnLastConsecutiveZeroes(S) ((S) | (S - 1))

using namespace std;

typedef long long LL;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<double> vd;
typedef pair<int, int> ii;
typedef map<char, int> mci;
typedef vector<ii> vii;
typedef vector<vii> vvii;

vi id(100), size(100);
int numSet;
void UF(int N){
    numSet = N;
    REP(i,N){
        id[i] = i;
    }
    size.assign(N,1);
}

int find(int u){
    return (id[u] == u) ? u : (id[u] = find(id[u]));
}

bool sameSet(int u, int v){
    return find(u) == find(v);
}

int count(){
    return numSet;
}

int sizeSet(int u){
    return size[find(u)];
}

void unionSet(int u, int v){
    int i = find(u);
    int j = find(v);
    if(i == j) return;
    if(size[i] < size[j]){
        id[i] = j;
        size[j] += size[i];
    }
    else{
        id[j] = i;
        size[i] += size[j];
    }
    numSet--;
}

int main(){
    int cases, n;
    char line[3];
    //freopen("in.txt","r",stdin);

    scanf("%d\n\n", &cases);
    while(cases--){
        gets(line);
        n = line[0] - 'A' + 1;
        UF(n);
        while(gets(line) && line[0]){
            unionSet(line[0] - 'A', line[1] - 'A');
        }
        printf("%d\n", count());
        if(cases > 0){
            printf("\n");
        }
    }
    return 0;
}
