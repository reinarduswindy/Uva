#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string>

#define REP(X, Y) for(int (X) = 0; (X) < (Y); ++(X))
#define FOR(X, Y, Z) for(int (X) = (Y); (X) <= (Z); ++(X))
#define RFOR(X, Y, Z) for(int (X) = (Y); (X) >= (Z); --(X))
#define SZ(Z) ((int) (Z).size)
#define ALL(W) (W).begin(), (W).end()
#define RESET(C, V) memset(C, V, sizeof(C))
#define PB push_back
#define MP make_pair
#define A first
#define B second
#define MX(Z, Y) Z = max((Z), (Y))
#define MN(X, Y) X = min((X), (Y))
#define FORIT(X, Y) for(typeof((Y).begin()) X = (Y).begin(); X != (Y).end(); X++)
#define RFORIT(X, Y) for(typeof(Y).rbegin()) X = (Y).rbegin(); X != (Y).rend(); X++)
#define INF (1 << 30)
#define _Pi(i) printf("%d", i)
#define _Pd(nd) printf("n.%d", d)
#define _Pc(c) printf("%c", c)
#define _Ps(s) printf("%s", s)
#define _Si(i) scanf("%d", &i)
#define _Sd(d) scanf("%d", &d)
#define _Sc(c) scanf("%c", &c)
#define _Ss(s) scanf("%s", &s)

#define isOn(S, j) (S & (1 << j))
#define setBit(S, j) (S |= (1 << j))
#define clearBit(S, j) (S &= ~(1 << j))
#define toggleBit(S, j) (S ^= (1 << j))
#define lowBit(S) (S & (-S))
#define setAll(S, n) (S = (1 << n) - 1)
#define modulo(S, N) ((S) & (N - 1))
#define isPowerOfTwo(S) (!(S & (S - 1)))
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
#define turnOffLastBit(S) ((S) & (S - 1))
#define turnOnLastZero(S) ((S) | (S + 1))
#define turnOffLastConsecutiveBits(S) ((S) & (S + 1))
#define turnOnLastConsecutiveZeroes(S) ((S) | (S - 1))

using namespace std;

typedef long long LL;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<double> vd;
typedef pair<int, int> ii;
typedef map<char, int> mci;
typedef vector<ii> vii;
typedef vector<vii> vvii;

int main(){
    int a, test = 0;
    //freopen("in.txt","r",stdin);
    while((scanf("%d", &a)) && (a != -1)){
        if(test) printf("\n");
        vi X;
        X.PB(a);
        while((scanf("%d", &a)) && (a != -1)){
            X.PB(a);
        }

        int maxintc = 1;
        vi LDS(X.size());
        REP(i, X.size()){
            LDS[i] = 1;
            REP(j, i){
                if(X[j] >= X[i]){
                    LDS[i] = max(LDS[i], LDS[j] + 1);
                }
            }
            maxintc = max(maxintc, LDS[i]);
        }
        printf("Test #%d:\n", ++test);
        printf("  maximum possible interceptions: %d\n", maxintc);
    }
    return 0;
}
